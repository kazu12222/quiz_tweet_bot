const puppeteer = require("puppeteer");
require("date-utils");
require("dotenv").config();
const sleep = (ms) => new Promise((res) => setTimeout(res, ms));
waitTime = 3000;

const LOGIN_URL = process.env.LOGIN_URL;
const LOGIN_USER_MAIL = process.env.LOGIN_USER_MAIL;
const LOGIN_PASS = process.env.LOGIN_PASS;
const QUIZHUB_LOGIN_MAIL_SELECTOR = process.env.QUIZHUB_LOGIN_MAIL_SELECTOR;
const LOGIN_PASS_SELECTOR = process.env.LOGIN_PASS_SELECTOR;
const LOGIN_SUBMIT_SELECTOR = process.env.LOGIN_SUBMIT_SELECTOR;
const CHOOSE_LOGIN_MAIL = process.env.CHOOSE_LOGIN_MAIL;

async function getQuizElement(quizSiteUrl) {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  const dt = new Date();
  const dtParse = Date.parse(dt);
  const listSelector = ".content-link";
  const userSelector = ".quiz-content__user";
  const createTimeSelector = ".quiz-content__create";

  page.setDefaultTimeout(100000);
  await page.goto(quizSiteUrl, {
    waitUntil: ["load", "networkidle2"],
  });
  await page.setCacheEnabled(false);
  await page.reload({ waitUntil: "networkidle2" });
  const list = await page.$$(listSelector);
  const title = await page.$$(".card-title");
  const user = await page.$$(userSelector);
  const createTime = await page.$$(createTimeSelector);
  const answerPublishDate = [];
  const quizzes = [];
  for (let i = 0; i < 5; i++) {
    let object = {
      href: await (await list[i].getProperty("href")).jsonValue(),
      textContent: await (await list[i].getProperty("textContent")).jsonValue(),
      html: await (await list[i].getProperty("innerHTML")).jsonValue(),
      title: await (await title[i].getProperty("textContent")).jsonValue(),
      user: await (await user[i].getProperty("textContent")).jsonValue(),
      createTime: await (
        await createTime[i].getProperty("textContent")
      ).jsonValue(),
    };
    let createTimeString = object.createTime.toString();
    let createTimeParse = Date.parse(createTimeString);
    if (dtParse - 3600000 < createTimeParse && createTimeParse <= dtParse) {
      let stringtext = object.textContent.toString();
      let temp = stringtext.match(/解答公開日：.+/);
      let ansDay;
      if (temp !== null) {
        ansDay = temp[0];
      } else {
        ansDay = null;
      }
      answerPublishDate.push(ansDay);
      quizzes.push(object);
    }
  }
  console.log(quizzes.length);
  console.log("ここからログイン");
  await page.goto(LOGIN_URL, { waitUntil: ["load", "networkidle2"] });
  await page.setCacheEnabled(false);
  await page.reload({ waitUntil: "networkidle2" });

  await page.click(CHOOSE_LOGIN_MAIL);
  await sleep(waitTime);
  await page.type(QUIZHUB_LOGIN_MAIL_SELECTOR, LOGIN_USER_MAIL);
  await sleep(waitTime);
  await page.click(LOGIN_SUBMIT_SELECTOR);
  await sleep(waitTime);
  await page.type(LOGIN_PASS_SELECTOR, LOGIN_PASS);
  await page.click(LOGIN_SUBMIT_SELECTOR);
  await sleep(waitTime);
  for (let i = 0; i < quizzes.length; i++) {
    console.log(quizzes[i].href);
    await page.goto(quizzes[i].href, {
      waitUntil: ["load", "networkidle2"],
    });
    await sleep(waitTime);

    let actionElements = await page.$$(".action");
    let howNiceText = [];
    let indicator = 0;
    console.log(actionElements.length);
    for (let i = 0; i < actionElements.length; i++) {
      howNiceText.push(
        await (await actionElements[i].getProperty("textContent")).jsonValue()
      );
      if (howNiceText[i].match(/いいね/)) {
        indicator = i;
        break;
      }
    }
    await actionElements[indicator].click();
    await sleep(waitTime);
  }

  await browser.close();
  return [quizzes, answerPublishDate];
}

module.exports.getQuizElement = getQuizElement;
